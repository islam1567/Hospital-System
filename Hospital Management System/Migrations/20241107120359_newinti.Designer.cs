// <auto-generated />
using Hospital_Management_System.Cores.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital_Management_System.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241107120359_newinti")]
    partial class newinti
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorsRooms", b =>
                {
                    b.Property<string>("DoctorsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DoctorsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("DoctorsRooms");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Doctor_patient", b =>
                {
                    b.Property<string>("Patient_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Doctor_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Patient_Id", "Doctor_Id");

                    b.HasIndex("Doctor_Id");

                    b.ToTable("doctor_Patients");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Doctors", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Nurses", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Patients", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Patient_Id")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Rooms", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Floor_No")
                        .HasColumnType("int");

                    b.Property<string>("Nurse_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("NursesRooms", b =>
                {
                    b.Property<string>("NursesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NursesId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("NursesRooms");
                });

            modelBuilder.Entity("PatientsRooms", b =>
                {
                    b.Property<string>("PatientsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("PatientsRooms");
                });

            modelBuilder.Entity("DoctorsRooms", b =>
                {
                    b.HasOne("Hospital_Management_System.Cores.Entities.Doctors", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital_Management_System.Cores.Entities.Rooms", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Doctor_patient", b =>
                {
                    b.HasOne("Hospital_Management_System.Cores.Entities.Doctors", "Doctors")
                        .WithMany("Doctor_Patients")
                        .HasForeignKey("Doctor_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital_Management_System.Cores.Entities.Patients", "Patients")
                        .WithMany("Doctor_Patients")
                        .HasForeignKey("Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Payment", b =>
                {
                    b.HasOne("Hospital_Management_System.Cores.Entities.Patients", "Patients")
                        .WithOne("Payment")
                        .HasForeignKey("Hospital_Management_System.Cores.Entities.Payment", "Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("NursesRooms", b =>
                {
                    b.HasOne("Hospital_Management_System.Cores.Entities.Nurses", null)
                        .WithMany()
                        .HasForeignKey("NursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital_Management_System.Cores.Entities.Rooms", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientsRooms", b =>
                {
                    b.HasOne("Hospital_Management_System.Cores.Entities.Patients", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital_Management_System.Cores.Entities.Rooms", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Doctors", b =>
                {
                    b.Navigation("Doctor_Patients");
                });

            modelBuilder.Entity("Hospital_Management_System.Cores.Entities.Patients", b =>
                {
                    b.Navigation("Doctor_Patients");

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
